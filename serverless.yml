service: medical-appointment-backend

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 1024
  timeout: 29
  environment:
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:custom.dynamoDBTable}
    SNS_TOPIC_PE: ${self:custom.snsTopicPE}
    SNS_TOPIC_CL: ${self:custom.snsTopicCL}
    SQS_PE_URL: ${self:custom.sqsPEUrl}
    SQS_CL_URL: ${self:custom.sqsCLUrl}
    SQS_CONFIRMATION_URL: ${self:custom.sqsConfirmationUrl}
    EVENT_BRIDGE_NAME: ${self:custom.eventBridgeName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoDBTable}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoDBTable}/index/*"
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - "arn:aws:sns:${self:provider.region}:*:${self:custom.snsTopicPE}"
            - "arn:aws:sns:${self:provider.region}:*:${self:custom.snsTopicCL}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - "arn:aws:sqs:${self:provider.region}:*:${self:custom.sqsPE}"
            - "arn:aws:sqs:${self:provider.region}:*:${self:custom.sqsCL}"
            - "arn:aws:sqs:${self:provider.region}:*:${self:custom.sqsConfirmation}"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - "arn:aws:events:${self:provider.region}:*:event-bus/default"

custom:
  # DynamoDB Table Name
  dynamoDBTable: ${self:service}-appointments-${self:provider.stage}
  
  # SNS Topics
  snsTopicPE: ${self:service}-topic-pe-${self:provider.stage}
  snsTopicCL: ${self:service}-topic-cl-${self:provider.stage}
  
  # SQS Queues
  sqsPE: ${self:service}-queue-pe-${self:provider.stage}
  sqsCL: ${self:service}-queue-cl-${self:provider.stage}
  sqsConfirmation: ${self:service}-confirmation-${self:provider.stage}
  
  sqsPEUrl: 
    Fn::GetAtt:
      - SqsPE
      - QueueUrl
  sqsCLUrl:
    Fn::GetAtt:
      - SqsCL
      - QueueUrl
  sqsConfirmationUrl:
    Fn::GetAtt:
      - SqsConfirmation
      - QueueUrl
  

  eventBridgeName: ${self:service}-event-bridge-${self:provider.stage}
  

  serverless-offline:
    httpPort: 3000

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

functions:

  appointment:
    handler: src/functions/appointment/handler.main
    events:
      - http:
          path: appointments
          method: post
          cors: true
      - http:
          path: appointments/{insuredId}
          method: get
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}
      SNS_TOPIC_PE_ARN:
        Ref: SnsPE
      SNS_TOPIC_CL_ARN:
        Ref: SnsCL
      SQS_CONFIRMATION_URL: ${self:custom.sqsConfirmationUrl}


  appointmentConfirmation:
    handler: src/functions/appointment/confirmation.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsConfirmation
              - Arn
          batchSize: 10
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamoDBTable}


  appointmentPE:
    handler: src/functions/appointment-pe/handler.main
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsPE
              - Arn
          batchSize: 10
    environment:
      EVENT_BRIDGE_NAME: ${self:custom.eventBridgeName}
      COUNTRY: PE

      RDS_HOST: ${env:RDS_PE_HOST, 'localhost'}
      RDS_PORT: ${env:RDS_PE_PORT, '3306'}
      RDS_DATABASE: ${env:RDS_PE_DATABASE, 'appointmentspe'}
      RDS_USER: ${env:RDS_PE_USER, 'admin'}
      RDS_PASSWORD: ${env:RDS_PE_PASSWORD, 'password'}


  appointmentCL:
    handler: src/functions/appointment-cl/handler.main
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsCL
              - Arn
          batchSize: 10
    environment:
      EVENT_BRIDGE_NAME: ${self:custom.eventBridgeName}
      COUNTRY: CL

      RDS_HOST: ${env:RDS_CL_HOST, 'localhost'}
      RDS_PORT: ${env:RDS_CL_PORT, '3306'}
      RDS_DATABASE: ${env:RDS_CL_DATABASE, 'appointmentscl'}
      RDS_USER: ${env:RDS_CL_USER, 'admin'}
      RDS_PASSWORD: ${env:RDS_CL_PASSWORD, 'password'}

resources:
  Resources:

    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDBTable}
        AttributeDefinitions:
          - AttributeName: appointmentId
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # SNS Topic - Perú
    SnsPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicPE}
        DisplayName: Medical Appointments Topic PE

    # SNS Topic - Chile
    SnsCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicCL}
        DisplayName: Medical Appointments Topic CL

    # SQS Queue - Perú
    SqsPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsPE}
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600 # 14 días

    # SQS Queue - Chile
    SqsCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsCL}
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600

    # SQS Queue - Confirmación
    SqsConfirmation:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsConfirmation}
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600

    # SNS Subscription - PE a SQS PE
    SnsPESubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn:
          Ref: SnsPE
        Endpoint:
          Fn::GetAtt:
            - SqsPE
            - Arn

    # SNS Subscription - CL a SQS CL
    SnsCLSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn:
          Ref: SnsCL
        Endpoint:
          Fn::GetAtt:
            - SqsCL
            - Arn

    # SQS Policy - Perú
    SqsPEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SqsPE
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource:
                Fn::GetAtt:
                  - SqsPE
                  - Arn
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: SnsPE

    # SQS Policy - Chile
    SqsCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - SqsCL
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource:
                Fn::GetAtt:
                  - SqsCL
                  - Arn
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: SnsCL

    # EventBridge Rule - Enruta eventos de confirmación a SQS
    EventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ${self:custom.eventBridgeName}
        Description: Route appointment confirmations to SQS
        EventPattern:
          source:
            - medical.appointment
          detail-type:
            - appointment.processed
        State: ENABLED
        Targets:
          - Arn:
              Fn::GetAtt:
                - SqsConfirmation
                - Arn
            Id: ConfirmationQueue

    # EventBridge Permission para SQS
    EventBridgeToSqsPermission:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SqsConfirmation
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource:
                Fn::GetAtt:
                  - SqsConfirmation
                  - Arn

  Outputs:
    ApiEndpoint:
      Description: API Gateway endpoint URL
      Value:
        Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}
    
    DynamoDBTable:
      Description: DynamoDB Table Name
      Value: ${self:custom.dynamoDBTable}
    
    SnsTopicPE:
      Description: SNS Topic ARN for Peru
      Value:
        Ref: SnsPE
    
    SnsTopicCL:
      Description: SNS Topic ARN for Chile
      Value:
        Ref: SnsCL